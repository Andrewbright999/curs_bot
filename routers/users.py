from typing import Union
from aiogram import  Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from users import user_list
from config import ADMIN_LIST
from buttons.inline_buttons import get_callback_buttons, buttons_list



router = Router()


def send_link(username, chat_id):
    if username:
        return "@"+username
    else:
        return f"https://t.me/{chat_id}"
    
    
async def admin_forward(msg: Union[Message, CallbackQuery], add_msg: str = None, forward: bool = True):
    for admin in ADMIN_LIST:
        try:
            if add_msg:
                await msg.bot.send_message(chat_id=admin, text=add_msg)
            if forward:
                await msg.forward(chat_id=admin)    
        except:
            pass
        
        
class ChickIn(StatesGroup):
    register_name = State()
    webinar_check_in = State()
    stream_pool = State()


@router.message(Command("start")) 
@router.message(F.text.lower() == "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
async def cmd_start(message: Message, state: FSMContext):
    state.clear()
    uid = message.from_user.id
    username = message.from_user.username
    user_list.check_user(uid)
    await admin_forward(message, add_msg=f"{send_link(username, uid)} –ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", forward=False)
    sream_btn = buttons_list(["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É‚úÖ"], "check_in_")
    markup = get_callback_buttons(sream_btn)
    await message.answer("""<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å!</b>
–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—Éüëá""",reply_markup=markup)
    await state.set_state(ChickIn.register_name)
    
    
@router.callback_query(F.data == "check_in_–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É‚úÖ")
async def diagnostic_check_in(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    username = callback.from_user.username
    await admin_forward(callback.message, add_msg=f"{send_link(username, uid)} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", forward=False )
    await callback.message.edit_text("""–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?""")
    await state.set_state(ChickIn.register_name)


    
@router.message(ChickIn.register_name)
async def message_with_text(message: Message, state: FSMContext):
    await state.clear()
    uid = message.from_user.id
    username = message.from_user.username
    await admin_forward(message, add_msg=f"–ò–º—è {send_link(username, uid)}")
    user_list.check_user(uid)
    sream_btn = buttons_list(["–•–æ—á—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å‚úÖ","–ü–æ–∫–∞ –¥—É–º–∞—é‚è≥"], "stream_poll_")
    markup = get_callback_buttons(sream_btn)
#     await message.answer(text="""<b>–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!</b>

# –Ø —Å–≤—è–∂—É—Å—å —Å –í–∞–º–∏ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.

# –•–æ—á—É —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø—ã, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ?""", reply_markup=markup)
    if username == None:
        await message.answer(text="""<b>–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!</b>
<i>–î–ª—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ</i>: @tolgonai_g

–•–æ—á—É —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø—ã, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ?""", reply_markup=markup)
    else:
        await message.answer(text="""–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!

–Ø —Å–≤—è–∂—É—Å—å —Å –í–∞–º–∏ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.

–•–æ—á—É —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø—ã, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ??""", reply_markup=markup)
    
    


@router.callback_query(F.data.contains("stream_poll_")) 
async def webinar_check_in(callback: CallbackQuery, state: FSMContext):
    username = callback.from_user.username
    chat_id = callback.from_user.id
    answer = callback.data.split("_")[-1]
    await state.clear()
    if answer == "–•–æ—á—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å‚úÖ":
        await admin_forward(callback.message, add_msg=f"{send_link(username, chat_id)} —Ö–æ—á–µ—Ç‚úÖ –ø–æ—É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ—Ç–æ–∫–µ", forward=False)
        await callback.message.answer("""<b>–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!<b>
–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à—É –∑–∞–ø–∏—Å—å""")
        await callback.message.delete_reply_markup()
        await state.clear()
    elif answer == "–ü–æ–∫–∞ –¥—É–º–∞—é‚è≥":
        await admin_forward(callback.message, add_msg=f"{send_link(username, chat_id)} –ø–æ–∫–∞ –¥—É–º–∞–µ—Ç‚è≥", forward=False)
        await callback.message.delete_reply_markup()
        wait_btn = buttons_list(["–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ç–æ–∫üñê"], "wait_poll_")
        markup = get_callback_buttons(wait_btn)
        await callback.message.answer("""–û–±–¥—É–º–∞–π—Ç–µ. –î–ª—è –í–∞—Å –¥–æ 10 —Å–µ–Ω—Ç—è–±—Ä—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ 15% —Å–∫–∏–¥–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–µ. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ""",reply_markup=markup)
    if username == None:
        await callback.message.edit_text(text="""<b>–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è!</b>
<i>–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ</i>: @tolgonai_g""" )
    else:
        await callback.message.edit_text(text="""<b>–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è!</b>
–Ø —Å–≤—è–∂—É—Å—å —Å –í–∞–º–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏.""")
        
        
@router.callback_query(F.data.contains("wait_poll_")) 
async def webinar_check_in(callback: CallbackQuery):
    username = callback.from_user.username
    chat_id = callback.from_user.id
    await admin_forward(callback.message, add_msg=f"{send_link(username, chat_id)} –ø–æ–¥—É–º–∞–ª –∏ —Ä–µ—à–∏–ª –ø–æ—É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ—Ç–æ–∫–µ", forward=False)
    if username == None:
        await callback.message.edit_text(text="""<b>–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!<b>
–î–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ: @tolgonai_g""")
    else:
        await callback.message.edit_text("""<b>–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!<b>
–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à—É –∑–∞–ø–∏—Å—å""")
    

@router.message(F.text)
async def message_with_text(message: Message):
    username = message.from_user.username
    chat_id = message.from_user.id
    print(message.from_user.id)
    user_list.check_user(message.from_user.id)
    await admin_forward(message, add_msg=f"{send_link(username, chat_id)} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        